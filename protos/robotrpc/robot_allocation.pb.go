// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/robotrpc/robot_allocation.proto

package robotrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RobotQuery struct {
	RobotType            string   `protobuf:"bytes,1,opt,name=robot_type,json=robotType,proto3" json:"robot_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RobotQuery) Reset()         { *m = RobotQuery{} }
func (m *RobotQuery) String() string { return proto.CompactTextString(m) }
func (*RobotQuery) ProtoMessage()    {}
func (*RobotQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bf1823ac685457, []int{0}
}

func (m *RobotQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RobotQuery.Unmarshal(m, b)
}
func (m *RobotQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RobotQuery.Marshal(b, m, deterministic)
}
func (m *RobotQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotQuery.Merge(m, src)
}
func (m *RobotQuery) XXX_Size() int {
	return xxx_messageInfo_RobotQuery.Size(m)
}
func (m *RobotQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotQuery.DiscardUnknown(m)
}

var xxx_messageInfo_RobotQuery proto.InternalMessageInfo

func (m *RobotQuery) GetRobotType() string {
	if m != nil {
		return m.RobotType
	}
	return ""
}

type RobotQueryResult struct {
	Robots               []string `protobuf:"bytes,1,rep,name=robots,proto3" json:"robots,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RobotQueryResult) Reset()         { *m = RobotQueryResult{} }
func (m *RobotQueryResult) String() string { return proto.CompactTextString(m) }
func (*RobotQueryResult) ProtoMessage()    {}
func (*RobotQueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bf1823ac685457, []int{1}
}

func (m *RobotQueryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RobotQueryResult.Unmarshal(m, b)
}
func (m *RobotQueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RobotQueryResult.Marshal(b, m, deterministic)
}
func (m *RobotQueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotQueryResult.Merge(m, src)
}
func (m *RobotQueryResult) XXX_Size() int {
	return xxx_messageInfo_RobotQueryResult.Size(m)
}
func (m *RobotQueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotQueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_RobotQueryResult proto.InternalMessageInfo

func (m *RobotQueryResult) GetRobots() []string {
	if m != nil {
		return m.Robots
	}
	return nil
}

type RobotLeaseRequest struct {
	RobotNameId          string   `protobuf:"bytes,1,opt,name=robot_name_id,json=robotNameId,proto3" json:"robot_name_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RobotLeaseRequest) Reset()         { *m = RobotLeaseRequest{} }
func (m *RobotLeaseRequest) String() string { return proto.CompactTextString(m) }
func (*RobotLeaseRequest) ProtoMessage()    {}
func (*RobotLeaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bf1823ac685457, []int{2}
}

func (m *RobotLeaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RobotLeaseRequest.Unmarshal(m, b)
}
func (m *RobotLeaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RobotLeaseRequest.Marshal(b, m, deterministic)
}
func (m *RobotLeaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotLeaseRequest.Merge(m, src)
}
func (m *RobotLeaseRequest) XXX_Size() int {
	return xxx_messageInfo_RobotLeaseRequest.Size(m)
}
func (m *RobotLeaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotLeaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RobotLeaseRequest proto.InternalMessageInfo

func (m *RobotLeaseRequest) GetRobotNameId() string {
	if m != nil {
		return m.RobotNameId
	}
	return ""
}

type RobotLeaseGrant struct {
	LeaseId              string   `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RobotLeaseGrant) Reset()         { *m = RobotLeaseGrant{} }
func (m *RobotLeaseGrant) String() string { return proto.CompactTextString(m) }
func (*RobotLeaseGrant) ProtoMessage()    {}
func (*RobotLeaseGrant) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3bf1823ac685457, []int{3}
}

func (m *RobotLeaseGrant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RobotLeaseGrant.Unmarshal(m, b)
}
func (m *RobotLeaseGrant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RobotLeaseGrant.Marshal(b, m, deterministic)
}
func (m *RobotLeaseGrant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotLeaseGrant.Merge(m, src)
}
func (m *RobotLeaseGrant) XXX_Size() int {
	return xxx_messageInfo_RobotLeaseGrant.Size(m)
}
func (m *RobotLeaseGrant) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotLeaseGrant.DiscardUnknown(m)
}

var xxx_messageInfo_RobotLeaseGrant proto.InternalMessageInfo

func (m *RobotLeaseGrant) GetLeaseId() string {
	if m != nil {
		return m.LeaseId
	}
	return ""
}

func init() {
	proto.RegisterType((*RobotQuery)(nil), "robotrpc.RobotQuery")
	proto.RegisterType((*RobotQueryResult)(nil), "robotrpc.RobotQueryResult")
	proto.RegisterType((*RobotLeaseRequest)(nil), "robotrpc.RobotLeaseRequest")
	proto.RegisterType((*RobotLeaseGrant)(nil), "robotrpc.RobotLeaseGrant")
}

func init() {
	proto.RegisterFile("protos/robotrpc/robot_allocation.proto", fileDescriptor_a3bf1823ac685457)
}

var fileDescriptor_a3bf1823ac685457 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x18, 0x84, 0x89, 0x42, 0x6d, 0x7f, 0x51, 0xeb, 0xa2, 0xa5, 0x8d, 0x0a, 0x61, 0x0f, 0x52, 0xaa,
	0x24, 0xa8, 0x07, 0xc1, 0x9b, 0x27, 0x29, 0x14, 0xc1, 0x20, 0x5e, 0xcb, 0xb6, 0xf9, 0x2d, 0x81,
	0x34, 0x1b, 0xf3, 0x6f, 0x84, 0x5c, 0x7d, 0x05, 0x9f, 0x4c, 0x7c, 0x05, 0x1f, 0x44, 0xf2, 0x6f,
	0x6a, 0x54, 0x7a, 0xcb, 0x4c, 0xbe, 0x9d, 0x64, 0x66, 0xe1, 0x34, 0xcb, 0xb5, 0xd1, 0x14, 0xe4,
	0x7a, 0xa6, 0x4d, 0x9e, 0xcd, 0xed, 0xc3, 0x54, 0x25, 0x89, 0x9e, 0x2b, 0x13, 0xeb, 0xd4, 0x67,
	0x40, 0xb4, 0x57, 0x80, 0x7b, 0xbc, 0xd0, 0x7a, 0x91, 0x60, 0xa0, 0xb2, 0x38, 0x50, 0x69, 0xaa,
	0x0d, 0x63, 0x64, 0x39, 0x79, 0x06, 0x10, 0x56, 0xe4, 0x43, 0x81, 0x79, 0x29, 0x4e, 0x00, 0x6c,
	0x9e, 0x29, 0x33, 0xec, 0x3b, 0x9e, 0x33, 0xec, 0x84, 0x1d, 0x76, 0x1e, 0xcb, 0x0c, 0xe5, 0x08,
	0xba, 0x0d, 0x1c, 0x22, 0x15, 0x89, 0x11, 0x3d, 0x68, 0x31, 0x40, 0x7d, 0xc7, 0xdb, 0x1c, 0x76,
	0xc2, 0x5a, 0xc9, 0x6b, 0xd8, 0x67, 0x76, 0x82, 0x8a, 0x30, 0xc4, 0x97, 0x02, 0xc9, 0x08, 0x09,
	0x3b, 0x36, 0x3f, 0x55, 0x4b, 0x9c, 0xc6, 0x51, 0xfd, 0x89, 0x6d, 0x36, 0xef, 0xd5, 0x12, 0xc7,
	0x91, 0x3c, 0x87, 0xbd, 0xe6, 0xe0, 0x5d, 0xae, 0x52, 0x23, 0x06, 0xd0, 0x4e, 0x2a, 0xd5, 0x9c,
	0xd8, 0x62, 0x3d, 0x8e, 0x2e, 0x3f, 0x9c, 0x1a, 0xbf, 0xfd, 0x59, 0x40, 0x3c, 0x01, 0x4c, 0x62,
	0x32, 0x6c, 0x93, 0x38, 0xf0, 0x57, 0x53, 0xf8, 0xcd, 0xcf, 0xbb, 0xee, 0x3a, 0xd7, 0x56, 0x92,
	0xbd, 0xb7, 0xcf, 0xaf, 0xf7, 0x8d, 0xae, 0xd8, 0xe5, 0xcd, 0x5e, 0x2f, 0xec, 0xc6, 0x24, 0x9e,
	0x01, 0x6c, 0x9b, 0x4a, 0x8a, 0xa3, 0x7f, 0x09, 0xbf, 0x8b, 0xba, 0x83, 0x75, 0x2f, 0xb9, 0x8c,
	0xf4, 0x38, 0xdd, 0x95, 0x87, 0x7f, 0xd3, 0x03, 0x6e, 0x44, 0x37, 0xce, 0x68, 0xd6, 0xe2, 0xab,
	0xb9, 0xfa, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x58, 0x33, 0x8b, 0xec, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RobotAllocationClient is the client API for RobotAllocation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RobotAllocationClient interface {
	ListRobots(ctx context.Context, in *RobotQuery, opts ...grpc.CallOption) (*RobotQueryResult, error)
	LeaseRobot(ctx context.Context, in *RobotLeaseRequest, opts ...grpc.CallOption) (*RobotLeaseGrant, error)
}

type robotAllocationClient struct {
	cc *grpc.ClientConn
}

func NewRobotAllocationClient(cc *grpc.ClientConn) RobotAllocationClient {
	return &robotAllocationClient{cc}
}

func (c *robotAllocationClient) ListRobots(ctx context.Context, in *RobotQuery, opts ...grpc.CallOption) (*RobotQueryResult, error) {
	out := new(RobotQueryResult)
	err := c.cc.Invoke(ctx, "/robotrpc.RobotAllocation/ListRobots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotAllocationClient) LeaseRobot(ctx context.Context, in *RobotLeaseRequest, opts ...grpc.CallOption) (*RobotLeaseGrant, error) {
	out := new(RobotLeaseGrant)
	err := c.cc.Invoke(ctx, "/robotrpc.RobotAllocation/LeaseRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RobotAllocationServer is the server API for RobotAllocation service.
type RobotAllocationServer interface {
	ListRobots(context.Context, *RobotQuery) (*RobotQueryResult, error)
	LeaseRobot(context.Context, *RobotLeaseRequest) (*RobotLeaseGrant, error)
}

// UnimplementedRobotAllocationServer can be embedded to have forward compatible implementations.
type UnimplementedRobotAllocationServer struct {
}

func (*UnimplementedRobotAllocationServer) ListRobots(ctx context.Context, req *RobotQuery) (*RobotQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRobots not implemented")
}
func (*UnimplementedRobotAllocationServer) LeaseRobot(ctx context.Context, req *RobotLeaseRequest) (*RobotLeaseGrant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaseRobot not implemented")
}

func RegisterRobotAllocationServer(s *grpc.Server, srv RobotAllocationServer) {
	s.RegisterService(&_RobotAllocation_serviceDesc, srv)
}

func _RobotAllocation_ListRobots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobotQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotAllocationServer).ListRobots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robotrpc.RobotAllocation/ListRobots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotAllocationServer).ListRobots(ctx, req.(*RobotQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotAllocation_LeaseRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobotLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotAllocationServer).LeaseRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/robotrpc.RobotAllocation/LeaseRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotAllocationServer).LeaseRobot(ctx, req.(*RobotLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RobotAllocation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "robotrpc.RobotAllocation",
	HandlerType: (*RobotAllocationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRobots",
			Handler:    _RobotAllocation_ListRobots_Handler,
		},
		{
			MethodName: "LeaseRobot",
			Handler:    _RobotAllocation_LeaseRobot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/robotrpc/robot_allocation.proto",
}
